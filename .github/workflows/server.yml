# This action builds the server-side code.

name: Server

on:
  push:
    paths:
      - 'Server/**'
      - '.github/workflows/server.yml'
    branches:
      - '**'
    tags:
      - '*.*.*'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

env:
  ARTIFACT_NAME: LiveChat-Server
  PUBLISHER_WEBSITE: https://viral32111.com
  DOCKER_REGISTRY_NAME: ghcr.io
  DOCKER_IMAGE_NAME: livechat

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-22.04
    permissions:
      contents: read
    defaults:
      run:
        working-directory: ./Server/
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Lint
        run: npx eslint ./source/

      - name: Compile TypeScript
        run: npx tsc

      - name: Generate Express session secret
        id: express
        run: |
          EXPRESS_SESSION_SECRET=$(openssl rand -hex 16)
          echo "EXPRESS_SESSION_SECRET=${EXPRESS_SESSION_SECRET}" >> $GITHUB_OUTPUT

      - name: Create environment variables file
        run: cp --verbose --archive ./production.env ./test.env

      - name: Run unit & integration tests
        env:
          MONGO_HOST: ${{ secrets.MONGO_HOST }}
          MONGO_DATABASE: LiveChat-Test
          MONGO_USER_NAME: ${{ secrets.MONGO_USERNAME }}
          MONGO_USER_PASS: ${{ secrets.MONGO_PASSWORD }}
          EXPRESS_SESSION_SECRET: ${{ steps.express.outputs.EXPRESS_SESSION_SECRET }}
        run: npm test

      - name: Upload build
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            ./Server/dist/
            ./Server/package.json
            ./Server/package-lock.json
            ./Server/production.env

      - name: Upload log
        uses: actions/upload-artifact@v3
        with:
          name: Server Log
          path: ./Server/logs/server.log

  docker:
    name: Docker Image
    runs-on: ubuntu-22.04
    needs: build
    defaults:
      run:
        working-directory: ./Server/
    permissions:
      contents: read
      packages: write
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Download build
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./Server/Build/

      - name: Remove unit & integration test scripts
        run: rm --verbose --recursive ./Build/dist/tests/

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY_NAME }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create metadata for Docker image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}
          flavor: latest=true
          tags: |
            type=ref,event=pr
            type=ref,event=branch
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
          labels: |
            org.opencontainers.image.title=Live Chat
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            com.docker.extension.publisher-url=${{ env.PUBLISHER_WEBSITE }}

      - name: Build & push Docker image
        uses: docker/build-push-action@v3
        with:
          push: ${{ github.event_name != 'pull_request' }}
          file: ./Server/Dockerfile
          context: ./Server/Build/
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          no-cache: true
          pull: true

      - name: Delete untagged Docker images
        uses: snok/container-retention-policy@v1
        with:
          image-names: ${{ env.DOCKER_IMAGE_NAME }}
          cut-off: 0 seconds ago UTC
          keep-at-least: 1
          untagged-only: true
          account-type: personal
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_PACKAGES }}

  deploy:
    name: Deploy to Google Cloud
    runs-on: ubuntu-22.04
    needs: docker
    concurrency:
      group: deploy-to-google-cloud
      cancel-in-progress: true
    env:
      GOOGLE_CLOUD_INSTANCE: livechat-server
      GOOGLE_CLOUD_INSTANCE_ZONE: europe-west2-c
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Authenticate using JSON service account key
        uses: google-github-actions@auth/v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}

      - name: Deploy to Compute Engine
        run: gcloud compute instances update-container ${{ env.GOOGLE_CLOUD_INSTANCE }} --zone ${{ env.GOOGLE_CLOUD_INSTANCE_ZONE }} --container-image ${{ env.DOCKER_REGISTRY_NAME }}/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:latest
